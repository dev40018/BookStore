# jdbc: API needed for connecting to db / h2: name of db / mem: in-memory db / testdb: name of our db
spring.datasource.url = jdbc:h2:mem:testdb;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH
# trying to act like PostgreSQL quirks; DATABASE_TO_LOWER is trying to be lowercase syntax like Postgre, h2 tends to be UpperCAse
# specifying the Driver class Name to look for
spring.datasource.driver-class-name= org.h2.Driver
spring.datasource.username=sa
spring.datasource.password= password



# 1. `jdbc:h2:mem:testdb` - This creates an in-memory H2 database named "testdb"

# 2. `MODE=PostgreSQL` - Makes H2 emulate PostgreSQL behavior and syntax

# 3. `DATABASE_TO_LOWER=TRUE` - Converts all unquoted identifiers (table names, column names) to lowercase, matching PostgreSQL's default behavior

# 4. `DEFAULT_NULL_ORDERING=HIGH` - This is particularly interesting. It configures how NULL values are sorted when using ORDER BY:
#    - HIGH means NULL values will appear last when sorting in ascending order (ASC)
#    - And first when sorting in descending order (DESC)
#    - This matches PostgreSQL's default NULL ordering behavior

# For example, with `DEFAULT_NULL_ORDERING=HIGH`:
# ```sql
# SELECT * FROM users ORDER BY age ASC;
# -- Results would be ordered like:
# -- age=10
# -- age=20
# -- age=30
# -- age=NULL
# ```

# This configuration is especially useful when you're using H2 for testing an application that will run on PostgreSQL in production, as it helps ensure your test database behaves similarly to your production database regarding NULL value sorting.